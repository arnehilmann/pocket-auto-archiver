#!/usr/bin/env python
import codecs
import glob
import json
import os
import re
import shutil
import subprocess
import sys
import time
import urllib2
#import urllib

ARCHIVE_DIR = "archive"
ARCHIVE_INDEX = os.path.abspath(os.path.join(ARCHIVE_DIR, "index.html"))
RESOURCES_DIR = "resources"

PHANTOMJS = os.path.abspath("phantomjs-1.9.7-linux-x86_64/bin/phantomjs")
RASTERIZEJS = os.path.abspath("rasterize.js")
SCREENSHOT_SIZE = "300px*200px"
SCREENSHOT_ZOOM = ".25"

if not os.path.exists(ARCHIVE_DIR):
    os.makedirs(ARCHIVE_DIR)

for resource in glob.glob(os.path.join(RESOURCES_DIR, "*")):
    print "copying resource %s" % resource
    shutil.copy(resource, ARCHIVE_DIR)

os.chdir(ARCHIVE_DIR)
content = {}
for item_filename in glob.glob(os.path.join("*", "item.json")):
    with open(item_filename) as item_file:
        item = json.load(item_file)
    content[item.get("item_id")] = item

with codecs.open("index.html", "w", encoding="utf-8") as index:
    index.write('''
	<html>
		<head>
			<link rel="stylesheet" href="bootstrap.min.css">
			<link rel="stylesheet" href="archive.css">
		</head>
		<body class="autumn">
			''')
    for key, item in sorted(content.iteritems(), key=lambda (k, v): v.get("time_added"), reverse=True):
        path = item.get("resolved_url")
        if not path:
            continue
        path = os.path.join(key, re.sub("^.*://", "", path))
        for variant in [path, path + ".html", os.path.join(path, "index.html")]:
            if os.path.exists(variant) and not os.path.isdir(variant):
                path = variant
                break

        screenshot = os.path.join(key, "screenshot.png")
        screenshot_problem = os.path.join(key, "screenshot.problem")
        if not os.path.exists(screenshot):
            if not os.path.exists(screenshot_problem):
                print "\trendering screenshot %s" % screenshot
                if path.endswith(".pdf"):
                    uq_path = urllib2.unquote(path)
                    cmd = ["pdftocairo", "-scale-to", "300", "-png", "-singlefile", uq_path, os.path.splitext(screenshot)[0]]
                    print " ".join(cmd)
                else:
                    cmd = [PHANTOMJS, RASTERIZEJS, path, screenshot, SCREENSHOT_SIZE, SCREENSHOT_ZOOM]
                returncode = subprocess.call(cmd)
                if returncode:
                    print "\texit code of rendering: %i" % returncode
                    open(screenshot_problem, "w")
        if os.path.exists(screenshot_problem):
            screenshot = None
	#print "item '%s'" % item.get("resolved_title").encode("utf-8")

        title = item.get("resolved_title")
        if not title:
           if path.endswith(".pdf"):
               uq_path = urllib2.unquote(path)
               p = subprocess.Popen(["pdfinfo", uq_path], stdout=subprocess.PIPE)
               for line in p.communicate()[0].splitlines():
                   if line.startswith("Title:"):
                       title = re.sub("^[^:]*:\s*", "", line).rstrip()
                   if line.startswith("Author:"):
                       author = re.sub("^[^:]*:\s*", "", line).rstrip()
               if author:
                   title = "%s: %s" % (author, title)
               item["resolved_title"] = title
           

        meta_file = os.path.join(key, "meta.json")
        with open(meta_file, "w") as meta:
            json.dump(item, meta, indent=4)

        index.write('<div class="itemcontainer"><div class="item">')
        if screenshot:
            index.write('<a class="left" href="%s"><img src="%s" width="100"></img></a>\n' % (path, screenshot))
        index.write('<div class="right"><a href=\"%s\">%s</a>\n' % (path, item.get("resolved_title")))
        index.write("<br/><a href=\"%s\">[original]</a>\n" % item.get("resolved_url"))
        index.write(" <a href=\"%s\">[meta]</a>\n" % meta_file)
        log_file = os.path.join(key, "wget.log")
        if os.path.exists(log_file):
            index.write(" <a href=\"%s\">[log]</a>" % log_file)
        #stacktrace_file = os.path.join(key, "stacktrace")
        #if os.path.exists(stacktrace_file):
            #index.write(" <a href=\"%s\">[stacktrace]</a>" % stacktrace_file)
        index.write("</div>")
        index.write('<div class="clear excerpt">%s</div>' % item.get("excerpt"))
        index.write("</div></div>\n\n")
    index.write('</body></html>')

print

print "archive index: file://%s" % ARCHIVE_INDEX
